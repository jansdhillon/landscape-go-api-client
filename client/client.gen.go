// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ScriptStatus.
const (
	ACTIVE   ScriptStatus = "ACTIVE"
	ARCHIVED ScriptStatus = "ARCHIVED"
	REDACTED ScriptStatus = "REDACTED"
	V1       ScriptStatus = "V1"
)

// AccessKeyLoginRequest defines model for AccessKeyLoginRequest.
type AccessKeyLoginRequest struct {
	// AccessKey Access key issued for API authentication.
	AccessKey string `json:"access_key" tfsdk:"access_key"`

	// SecretKey Secret key paired with the access key.
	SecretKey string `json:"secret_key" tfsdk:"secret_key"`
}

// Error defines model for Error.
type Error struct {
	Code    *int    `json:"code,omitempty" tfsdk:"code"`
	Message *string `json:"message,omitempty" tfsdk:"message"`
}

// LegacyActionResult defines model for LegacyActionResult.
type LegacyActionResult struct {
	union json.RawMessage
}

// LegacyActionResult1 defines model for .
type LegacyActionResult1 struct {
	// Filename Name of the attachment that was created.
	Filename string `json:"filename" tfsdk:"filename"`
}

// LoginAccount defines model for LoginAccount.
type LoginAccount struct {
	// ClassicDashboardUrl URL of the classic dashboard for the account.
	ClassicDashboardUrl *string `json:"classic_dashboard_url,omitempty" tfsdk:"classic_dashboard_url"`

	// Default Indicates whether this is the default account.
	Default bool `json:"default" tfsdk:"default"`

	// Name Internal account identifier.
	Name string `json:"name" tfsdk:"name"`

	// Subdomain Optional subdomain assigned to the account.
	Subdomain *string `json:"subdomain" tfsdk:"subdomain"`

	// Title Display name for the account.
	Title string `json:"title" tfsdk:"title"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	// Account The account to login into (optional).
	Account *string `json:"account" tfsdk:"account"`

	// Email Email address used to authenticate with Landscape Server.
	Email openapi_types.Email `json:"email" tfsdk:"email"`

	// Password Password associated with the provided email.
	Password string `json:"password" tfsdk:"password"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	// Accounts Accounts available to the authenticated user.
	Accounts []LoginAccount `json:"accounts" tfsdk:"accounts"`

	// CurrentAccount Identifier of the account in current use.
	CurrentAccount string `json:"current_account" tfsdk:"current_account"`

	// Email Email address of the authenticated user.
	Email openapi_types.Email `json:"email" tfsdk:"email"`

	// Name Display name of the authenticated user.
	Name *string `json:"name,omitempty" tfsdk:"name"`

	// SelfHosted Indicates whether the Landscape deployment is self hosted.
	SelfHosted *bool `json:"self_hosted,omitempty" tfsdk:"self_hosted"`

	// Token JWT used to authorize subsequent API requests.
	Token                string                 `json:"token" tfsdk:"token"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Script defines model for Script.
type Script struct {
	AccessGroup    *string                    `json:"access_group,omitempty" tfsdk:"access_group"`
	Attachments    *[]Script_Attachments_Item `json:"attachments" tfsdk:"attachments"`
	Code           *string                    `json:"code" tfsdk:"code"`
	CreatedAt      *string                    `json:"created_at" tfsdk:"created_at"`
	CreatedBy      *ScriptCreator             `json:"created_by,omitempty" tfsdk:"created_by"`
	Id             int                        `json:"id" tfsdk:"id"`
	Interpreter    *string                    `json:"interpreter" tfsdk:"interpreter"`
	IsEditable     *bool                      `json:"is_editable" tfsdk:"is_editable"`
	IsExecutable   *bool                      `json:"is_executable" tfsdk:"is_executable"`
	IsRedactable   *bool                      `json:"is_redactable" tfsdk:"is_redactable"`
	LastEditedAt   *string                    `json:"last_edited_at" tfsdk:"last_edited_at"`
	LastEditedBy   *Script_LastEditedBy       `json:"last_edited_by" tfsdk:"last_edited_by"`
	ScriptProfiles *[]ScriptProfile           `json:"script_profiles" tfsdk:"script_profiles"`
	Status         ScriptStatus               `json:"status" tfsdk:"status"`
	TimeLimit      *int                       `json:"time_limit,omitempty" tfsdk:"time_limit"`
	Title          string                     `json:"title" tfsdk:"title"`
	Username       *string                    `json:"username" tfsdk:"username"`
	VersionNumber  *int                       `json:"version_number" tfsdk:"version_number"`
}

// ScriptAttachments1 defines model for .
type ScriptAttachments1 = int

// Script_Attachments_Item defines model for Script.attachments.Item.
type Script_Attachments_Item struct {
	union json.RawMessage
}

// ScriptLastEditedBy1 defines model for .
type ScriptLastEditedBy1 = string

// Script_LastEditedBy defines model for Script.LastEditedBy.
type Script_LastEditedBy struct {
	union json.RawMessage
}

// ScriptStatus defines model for Script.Status.
type ScriptStatus string

// ScriptAttachment defines model for ScriptAttachment.
type ScriptAttachment struct {
	Filename string `json:"filename" tfsdk:"filename"`
	Id       int    `json:"id" tfsdk:"id"`
}

// ScriptCreator defines model for ScriptCreator.
type ScriptCreator struct {
	Id   *int    `json:"id" tfsdk:"id"`
	Name *string `json:"name" tfsdk:"name"`
}

// ScriptProfile defines model for ScriptProfile.
type ScriptProfile struct {
	Id    int    `json:"id" tfsdk:"id"`
	Title string `json:"title" tfsdk:"title"`
}

// LegacyActionParam defines model for LegacyActionParam.
type LegacyActionParam = string

// LegacyVersionParam defines model for LegacyVersionParam.
type LegacyVersionParam = string

// ScriptIdPathParam defines model for ScriptIdPathParam.
type ScriptIdPathParam = int

// BadRequest defines model for BadRequest.
type BadRequest = Error

// LegacyActionResponse defines model for LegacyActionResponse.
type LegacyActionResponse = LegacyActionResult

// NotFound defines model for NotFound.
type NotFound = Error

// ScriptNotFound defines model for ScriptNotFound.
type ScriptNotFound = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// InvokeLegacyActionParams defines parameters for InvokeLegacyAction.
type InvokeLegacyActionParams struct {
	// Version The legacy API version. Landscape currently expects the fixed value `2011-08-01`.
	Version LegacyVersionParam `form:"version" json:"version"`

	// Action The legacy API action name to invoke.
	Action LegacyActionParam `form:"action" json:"action"`
}

// LoginWithPasswordJSONRequestBody defines body for LoginWithPassword for application/json ContentType.
type LoginWithPasswordJSONRequestBody = LoginRequest

// LoginWithAccessKeyJSONRequestBody defines body for LoginWithAccessKey for application/json ContentType.
type LoginWithAccessKeyJSONRequestBody = AccessKeyLoginRequest

// Getter for additional properties for LoginResponse. Returns the specified
// element and whether it was found
func (a LoginResponse) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for LoginResponse
func (a *LoginResponse) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for LoginResponse to handle AdditionalProperties
func (a *LoginResponse) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["accounts"]; found {
		err = json.Unmarshal(raw, &a.Accounts)
		if err != nil {
			return fmt.Errorf("error reading 'accounts': %w", err)
		}
		delete(object, "accounts")
	}

	if raw, found := object["current_account"]; found {
		err = json.Unmarshal(raw, &a.CurrentAccount)
		if err != nil {
			return fmt.Errorf("error reading 'current_account': %w", err)
		}
		delete(object, "current_account")
	}

	if raw, found := object["email"]; found {
		err = json.Unmarshal(raw, &a.Email)
		if err != nil {
			return fmt.Errorf("error reading 'email': %w", err)
		}
		delete(object, "email")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["self_hosted"]; found {
		err = json.Unmarshal(raw, &a.SelfHosted)
		if err != nil {
			return fmt.Errorf("error reading 'self_hosted': %w", err)
		}
		delete(object, "self_hosted")
	}

	if raw, found := object["token"]; found {
		err = json.Unmarshal(raw, &a.Token)
		if err != nil {
			return fmt.Errorf("error reading 'token': %w", err)
		}
		delete(object, "token")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for LoginResponse to handle AdditionalProperties
func (a LoginResponse) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["accounts"], err = json.Marshal(a.Accounts)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'accounts': %w", err)
	}

	object["current_account"], err = json.Marshal(a.CurrentAccount)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'current_account': %w", err)
	}

	object["email"], err = json.Marshal(a.Email)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'email': %w", err)
	}

	if a.Name != nil {
		object["name"], err = json.Marshal(a.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	if a.SelfHosted != nil {
		object["self_hosted"], err = json.Marshal(a.SelfHosted)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'self_hosted': %w", err)
		}
	}

	object["token"], err = json.Marshal(a.Token)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'token': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsScript returns the union data inside the LegacyActionResult as a Script
func (t LegacyActionResult) AsScript() (Script, error) {
	var body Script
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromScript overwrites any union data inside the LegacyActionResult as the provided Script
func (t *LegacyActionResult) FromScript(v Script) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeScript performs a merge with any union data inside the LegacyActionResult, using the provided Script
func (t *LegacyActionResult) MergeScript(v Script) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLegacyActionResult1 returns the union data inside the LegacyActionResult as a LegacyActionResult1
func (t LegacyActionResult) AsLegacyActionResult1() (LegacyActionResult1, error) {
	var body LegacyActionResult1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLegacyActionResult1 overwrites any union data inside the LegacyActionResult as the provided LegacyActionResult1
func (t *LegacyActionResult) FromLegacyActionResult1(v LegacyActionResult1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLegacyActionResult1 performs a merge with any union data inside the LegacyActionResult, using the provided LegacyActionResult1
func (t *LegacyActionResult) MergeLegacyActionResult1(v LegacyActionResult1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t LegacyActionResult) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LegacyActionResult) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsScriptAttachment returns the union data inside the Script_Attachments_Item as a ScriptAttachment
func (t Script_Attachments_Item) AsScriptAttachment() (ScriptAttachment, error) {
	var body ScriptAttachment
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromScriptAttachment overwrites any union data inside the Script_Attachments_Item as the provided ScriptAttachment
func (t *Script_Attachments_Item) FromScriptAttachment(v ScriptAttachment) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeScriptAttachment performs a merge with any union data inside the Script_Attachments_Item, using the provided ScriptAttachment
func (t *Script_Attachments_Item) MergeScriptAttachment(v ScriptAttachment) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsScriptAttachments1 returns the union data inside the Script_Attachments_Item as a ScriptAttachments1
func (t Script_Attachments_Item) AsScriptAttachments1() (ScriptAttachments1, error) {
	var body ScriptAttachments1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromScriptAttachments1 overwrites any union data inside the Script_Attachments_Item as the provided ScriptAttachments1
func (t *Script_Attachments_Item) FromScriptAttachments1(v ScriptAttachments1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeScriptAttachments1 performs a merge with any union data inside the Script_Attachments_Item, using the provided ScriptAttachments1
func (t *Script_Attachments_Item) MergeScriptAttachments1(v ScriptAttachments1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Script_Attachments_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Script_Attachments_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsScriptCreator returns the union data inside the Script_LastEditedBy as a ScriptCreator
func (t Script_LastEditedBy) AsScriptCreator() (ScriptCreator, error) {
	var body ScriptCreator
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromScriptCreator overwrites any union data inside the Script_LastEditedBy as the provided ScriptCreator
func (t *Script_LastEditedBy) FromScriptCreator(v ScriptCreator) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeScriptCreator performs a merge with any union data inside the Script_LastEditedBy, using the provided ScriptCreator
func (t *Script_LastEditedBy) MergeScriptCreator(v ScriptCreator) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsScriptLastEditedBy1 returns the union data inside the Script_LastEditedBy as a ScriptLastEditedBy1
func (t Script_LastEditedBy) AsScriptLastEditedBy1() (ScriptLastEditedBy1, error) {
	var body ScriptLastEditedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromScriptLastEditedBy1 overwrites any union data inside the Script_LastEditedBy as the provided ScriptLastEditedBy1
func (t *Script_LastEditedBy) FromScriptLastEditedBy1(v ScriptLastEditedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeScriptLastEditedBy1 performs a merge with any union data inside the Script_LastEditedBy, using the provided ScriptLastEditedBy1
func (t *Script_LastEditedBy) MergeScriptLastEditedBy1(v ScriptLastEditedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Script_LastEditedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Script_LastEditedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// InvokeLegacyAction request
	InvokeLegacyAction(ctx context.Context, params *InvokeLegacyActionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LoginWithPasswordWithBody request with any body
	LoginWithPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LoginWithPassword(ctx context.Context, body LoginWithPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LoginWithAccessKeyWithBody request with any body
	LoginWithAccessKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LoginWithAccessKey(ctx context.Context, body LoginWithAccessKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScript request
	GetScript(ctx context.Context, scriptId ScriptIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveScript request
	ArchiveScript(ctx context.Context, scriptId ScriptIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RedactScript request
	RedactScript(ctx context.Context, scriptId ScriptIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) InvokeLegacyAction(ctx context.Context, params *InvokeLegacyActionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInvokeLegacyActionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginWithPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginWithPasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginWithPassword(ctx context.Context, body LoginWithPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginWithPasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginWithAccessKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginWithAccessKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginWithAccessKey(ctx context.Context, body LoginWithAccessKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginWithAccessKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScript(ctx context.Context, scriptId ScriptIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScriptRequest(c.Server, scriptId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveScript(ctx context.Context, scriptId ScriptIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveScriptRequest(c.Server, scriptId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RedactScript(ctx context.Context, scriptId ScriptIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRedactScriptRequest(c.Server, scriptId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewInvokeLegacyActionRequest generates requests for InvokeLegacyAction
func NewInvokeLegacyActionRequest(server string, params *InvokeLegacyActionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "action", runtime.ParamLocationQuery, params.Action); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLoginWithPasswordRequest calls the generic LoginWithPassword builder with application/json body
func NewLoginWithPasswordRequest(server string, body LoginWithPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLoginWithPasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewLoginWithPasswordRequestWithBody generates requests for LoginWithPassword with any type of body
func NewLoginWithPasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLoginWithAccessKeyRequest calls the generic LoginWithAccessKey builder with application/json body
func NewLoginWithAccessKeyRequest(server string, body LoginWithAccessKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLoginWithAccessKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewLoginWithAccessKeyRequestWithBody generates requests for LoginWithAccessKey with any type of body
func NewLoginWithAccessKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/login/access-key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetScriptRequest generates requests for GetScript
func NewGetScriptRequest(server string, scriptId ScriptIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "script_id", runtime.ParamLocationPath, scriptId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/scripts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewArchiveScriptRequest generates requests for ArchiveScript
func NewArchiveScriptRequest(server string, scriptId ScriptIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "script_id", runtime.ParamLocationPath, scriptId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/scripts/%s:archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRedactScriptRequest generates requests for RedactScript
func NewRedactScriptRequest(server string, scriptId ScriptIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "script_id", runtime.ParamLocationPath, scriptId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/scripts/%s:redact", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// InvokeLegacyActionWithResponse request
	InvokeLegacyActionWithResponse(ctx context.Context, params *InvokeLegacyActionParams, reqEditors ...RequestEditorFn) (*InvokeLegacyActionResponse, error)

	// LoginWithPasswordWithBodyWithResponse request with any body
	LoginWithPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginWithPasswordResponse, error)

	LoginWithPasswordWithResponse(ctx context.Context, body LoginWithPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginWithPasswordResponse, error)

	// LoginWithAccessKeyWithBodyWithResponse request with any body
	LoginWithAccessKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginWithAccessKeyResponse, error)

	LoginWithAccessKeyWithResponse(ctx context.Context, body LoginWithAccessKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginWithAccessKeyResponse, error)

	// GetScriptWithResponse request
	GetScriptWithResponse(ctx context.Context, scriptId ScriptIdPathParam, reqEditors ...RequestEditorFn) (*GetScriptResponse, error)

	// ArchiveScriptWithResponse request
	ArchiveScriptWithResponse(ctx context.Context, scriptId ScriptIdPathParam, reqEditors ...RequestEditorFn) (*ArchiveScriptResponse, error)

	// RedactScriptWithResponse request
	RedactScriptWithResponse(ctx context.Context, scriptId ScriptIdPathParam, reqEditors ...RequestEditorFn) (*RedactScriptResponse, error)
}

type InvokeLegacyActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LegacyActionResponse
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r InvokeLegacyActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InvokeLegacyActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginWithPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoginResponse
	JSON400      *BadRequest
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r LoginWithPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginWithPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginWithAccessKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoginResponse
	JSON400      *BadRequest
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r LoginWithAccessKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginWithAccessKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Script
	JSON404      *ScriptNotFound
}

// Status returns HTTPResponse.Status
func (r GetScriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveScriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
	JSON404      *ScriptNotFound
}

// Status returns HTTPResponse.Status
func (r ArchiveScriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveScriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RedactScriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
	JSON404      *ScriptNotFound
}

// Status returns HTTPResponse.Status
func (r RedactScriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RedactScriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// InvokeLegacyActionWithResponse request returning *InvokeLegacyActionResponse
func (c *ClientWithResponses) InvokeLegacyActionWithResponse(ctx context.Context, params *InvokeLegacyActionParams, reqEditors ...RequestEditorFn) (*InvokeLegacyActionResponse, error) {
	rsp, err := c.InvokeLegacyAction(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInvokeLegacyActionResponse(rsp)
}

// LoginWithPasswordWithBodyWithResponse request with arbitrary body returning *LoginWithPasswordResponse
func (c *ClientWithResponses) LoginWithPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginWithPasswordResponse, error) {
	rsp, err := c.LoginWithPasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginWithPasswordResponse(rsp)
}

func (c *ClientWithResponses) LoginWithPasswordWithResponse(ctx context.Context, body LoginWithPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginWithPasswordResponse, error) {
	rsp, err := c.LoginWithPassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginWithPasswordResponse(rsp)
}

// LoginWithAccessKeyWithBodyWithResponse request with arbitrary body returning *LoginWithAccessKeyResponse
func (c *ClientWithResponses) LoginWithAccessKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginWithAccessKeyResponse, error) {
	rsp, err := c.LoginWithAccessKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginWithAccessKeyResponse(rsp)
}

func (c *ClientWithResponses) LoginWithAccessKeyWithResponse(ctx context.Context, body LoginWithAccessKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginWithAccessKeyResponse, error) {
	rsp, err := c.LoginWithAccessKey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginWithAccessKeyResponse(rsp)
}

// GetScriptWithResponse request returning *GetScriptResponse
func (c *ClientWithResponses) GetScriptWithResponse(ctx context.Context, scriptId ScriptIdPathParam, reqEditors ...RequestEditorFn) (*GetScriptResponse, error) {
	rsp, err := c.GetScript(ctx, scriptId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScriptResponse(rsp)
}

// ArchiveScriptWithResponse request returning *ArchiveScriptResponse
func (c *ClientWithResponses) ArchiveScriptWithResponse(ctx context.Context, scriptId ScriptIdPathParam, reqEditors ...RequestEditorFn) (*ArchiveScriptResponse, error) {
	rsp, err := c.ArchiveScript(ctx, scriptId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveScriptResponse(rsp)
}

// RedactScriptWithResponse request returning *RedactScriptResponse
func (c *ClientWithResponses) RedactScriptWithResponse(ctx context.Context, scriptId ScriptIdPathParam, reqEditors ...RequestEditorFn) (*RedactScriptResponse, error) {
	rsp, err := c.RedactScript(ctx, scriptId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRedactScriptResponse(rsp)
}

// ParseInvokeLegacyActionResponse parses an HTTP response from a InvokeLegacyActionWithResponse call
func ParseInvokeLegacyActionResponse(rsp *http.Response) (*InvokeLegacyActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InvokeLegacyActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LegacyActionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseLoginWithPasswordResponse parses an HTTP response from a LoginWithPasswordWithResponse call
func ParseLoginWithPasswordResponse(rsp *http.Response) (*LoginWithPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginWithPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoginResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseLoginWithAccessKeyResponse parses an HTTP response from a LoginWithAccessKeyWithResponse call
func ParseLoginWithAccessKeyResponse(rsp *http.Response) (*LoginWithAccessKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginWithAccessKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoginResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetScriptResponse parses an HTTP response from a GetScriptWithResponse call
func ParseGetScriptResponse(rsp *http.Response) (*GetScriptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Script
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ScriptNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseArchiveScriptResponse parses an HTTP response from a ArchiveScriptWithResponse call
func ParseArchiveScriptResponse(rsp *http.Response) (*ArchiveScriptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveScriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ScriptNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRedactScriptResponse parses an HTTP response from a RedactScriptWithResponse call
func ParseRedactScriptResponse(rsp *http.Response) (*RedactScriptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RedactScriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ScriptNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}
